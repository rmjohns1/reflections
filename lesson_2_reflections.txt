What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository creates a .git subdirectory and prepares for the first commit

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area is where you place only those files in a working directory that will be tracked using git.

How can you use the staging area to make sure you have one commit per logical change?
	
	Because the staging area only includes the files that you want to commit changes on
	it forces you to be logical?

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches would be helpful when large experimental changes are being contemplated, but you still want to maintain
	the existing working version as the master branch.

How do the diagrams help you visualize the branch structure?

	The diagrams help you see the relationship between parent and child commits going back in time.  Branches
	can be easily interpreted in this kind of diagram.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	Merging two branches together results in a logical amalgamation of the code that has been modified in the two branches.
	They are represented as two joining arros in the diagram because it represents the joining of the two commit streams.

What are the pros and cons of Git automatic merging vs. always doing merges manually?

	Git will automatically merge according to specific rules when the logic to do so is unambiguous.  When there is any
	ambiguity at all git will require the user to merge manually in a text file by deleting the parts they don't want.  
	While this requires some effort on the part of the programmer, it also makes sure that git doesn't introduce problems
	unnecessarily.
